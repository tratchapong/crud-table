{"version":3,"sources":["index.js"],"names":["DescriptionRenderer","field","tasks","id","title","description","SORTERS","mapper","a","b","localeCompare","count","length","service","payload","result","Array","from","sort","data","x","direction","getSorter","Promise","resolve","task","push","find","t","filter","styles","container","margin","width","Example","style","caption","fetchItems","name","label","hideInCreateForm","placeholder","render","message","trigger","onSubmit","submitText","validate","values","errors","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6dcd731e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport CRUDTable, {\r\n  Fields,\r\n  Field,\r\n  CreateForm,\r\n  UpdateForm,\r\n  DeleteForm\r\n} from \"react-crud-table\";\r\n\r\n// Component's Base CSS\r\nimport \"./index.css\";\r\n\r\nconst DescriptionRenderer = ({ field }) => <textarea {...field} />;\r\n\r\nlet tasks = [\r\n  {\r\n    id: 1,\r\n    title: \"Create an example\",\r\n    description: \"Create an example of how to use the component\"\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Improve\",\r\n    description: \"Improve the component!\"\r\n  },\r\n  { \r\n    id: 3,\r\n    title: \"Practice\",\r\n    description: \"Practice all things with fun..\"\r\n  },\r\n  {\r\n    id: 4,\r\n    title: \"Reading\",\r\n    description: \"Read all topic with fun factor..\"\r\n  }\r\n];\r\n\r\nconst SORTERS = {\r\n  NUMBER_ASCENDING: mapper => (a, b) => mapper(a) - mapper(b),\r\n  NUMBER_DESCENDING: mapper => (a, b) => mapper(b) - mapper(a),\r\n  STRING_ASCENDING: mapper => (a, b) => mapper(a).localeCompare(mapper(b)),\r\n  STRING_DESCENDING: mapper => (a, b) => mapper(b).localeCompare(mapper(a))\r\n};\r\n\r\nconst getSorter = data => {\r\n  const mapper = x => x[data.field];\r\n  let sorter = SORTERS.STRING_ASCENDING(mapper);\r\n\r\n  if (data.field === \"id\") {\r\n    sorter =\r\n      data.direction === \"ascending\"\r\n        ? SORTERS.NUMBER_ASCENDING(mapper)\r\n        : SORTERS.NUMBER_DESCENDING(mapper);\r\n  } else {\r\n    sorter =\r\n      data.direction === \"ascending\"\r\n        ? SORTERS.STRING_ASCENDING(mapper)\r\n        : SORTERS.STRING_DESCENDING(mapper);\r\n  }\r\n\r\n  return sorter;\r\n};\r\n\r\nlet count = tasks.length;\r\nconst service = {\r\n  fetchItems: payload => {\r\n    let result = Array.from(tasks);\r\n    result = result.sort(getSorter(payload.sort));\r\n    return Promise.resolve(result);\r\n  },\r\n  create: task => {\r\n    count += 1;\r\n    tasks.push({\r\n      ...task,\r\n      id: count\r\n    });\r\n    return Promise.resolve(task);\r\n  },\r\n  update: data => {\r\n    const task = tasks.find(t => t.id === data.id);\r\n    task.title = data.title;\r\n    task.description = data.description;\r\n    return Promise.resolve(task);\r\n  },\r\n  delete: data => {\r\n    const task = tasks.find(t => t.id === data.id);\r\n    tasks = tasks.filter(t => t.id !== task.id);\r\n    return Promise.resolve(task);\r\n  }\r\n};\r\n\r\nconst styles = {\r\n  container: { margin: \"auto\", width: \"fit-content\" }\r\n};\r\n\r\nconst Example = () => (\r\n  <div style={styles.container}>\r\n    <CRUDTable\r\n      caption=\"Tasks todo\"\r\n      fetchItems={payload => service.fetchItems(payload)}\r\n    >\r\n      <Fields>\r\n        <Field name=\"id\" label=\"Id\" hideInCreateForm />\r\n        <Field name=\"title\" label=\"Title\" placeholder=\"Title\" />\r\n        <Field\r\n          name=\"description\"\r\n          label=\"Description\"\r\n          render={DescriptionRenderer}\r\n        />\r\n      </Fields>\r\n      <CreateForm\r\n        title=\"Task Creation\"\r\n        message=\"Create a new task!\"\r\n        trigger=\"Create Task\"\r\n        onSubmit={task => service.create(task)}\r\n        submitText=\"Create\"\r\n        validate={values => {\r\n          const errors = {};\r\n          if (!values.title) {\r\n            errors.title = \"Please, provide task's title\";\r\n          }\r\n\r\n          if (!values.description) {\r\n            errors.description = \"Please, provide task's description\";\r\n          }\r\n\r\n          return errors;\r\n        }}\r\n      />\r\n\r\n      <UpdateForm\r\n        title=\"Task Update Process\"\r\n        message=\"Update task\"\r\n        trigger=\"Update\"\r\n        onSubmit={task => service.update(task)}\r\n        submitText=\"Update\"\r\n        validate={values => {\r\n          const errors = {};\r\n\r\n          if (!values.id) {\r\n            errors.id = \"Please, provide id\";\r\n          }\r\n\r\n          if (!values.title) {\r\n            errors.title = \"Please, provide task's title\";\r\n          }\r\n\r\n          if (!values.description) {\r\n            errors.description = \"Please, provide task's description\";\r\n          }\r\n\r\n          return errors;\r\n        }}\r\n      />\r\n\r\n      <DeleteForm\r\n        title=\"Task Delete Process\"\r\n        message=\"Are you sure you want to delete the task?\"\r\n        trigger=\"Delete\"\r\n        onSubmit={task => service.delete(task)}\r\n        submitText=\"Delete\"\r\n        validate={values => {\r\n          const errors = {};\r\n          if (!values.id) {\r\n            errors.id = \"Please, provide id\";\r\n          }\r\n          return errors;\r\n        }}\r\n      />\r\n    </CRUDTable>\r\n  </div>\r\n);\r\n\r\nExample.propTypes = {};\r\n\r\nReactDOM.render(<Example />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}